import lib/desc;
import lib/bool;

NatD : Desc () = Var [] |: Ind (Var []) (Var []);
Nat = Data NatD [];

Z : Nat = [True];
S (n : Nat) : Nat = [False, n];

indNat
  <k> (P : Nat -> Type k)
  (z : P Z)
  (s : (m : Nat) -> P m -> P (S m))
  (x : Nat) : P x
  = elimSumD P (\_ _ _. z) (\case ind d. s (case d.0) (ind d.0)) x;

paraNat <k> {R : Type k} (n : Nat) (z : R) (s : Nat -> R -> R) : R
  = indNat (\_. R) z s n;

caseNat <k> {R : Type k} (n : Nat) (z : R) (s : Nat -> R) : R
  = paraNat n z (\m _. s m);

cataNat <k> {R : Type k} (n : Nat) (z : R) (s : R -> R) : R
  = paraNat n z (\_. s);

predN (n : Nat) : Nat = caseNat n 0 (\m. m);
addN (a b : Nat) : Nat = cataNat a b S;
subN (a b : Nat) : Nat = cataNat b a predN;
mulN (a b : Nat) : Nat = cataNat a 0 (addN b);
powN (a b : Nat) : Nat = cataNat b 1 (mulN a);

(+N) = addN;
(-N) = subN;
(*N) = mulN;
(^N:) = powN;

Z? (n : Nat) : Bool = caseNat n True (\_. False);
S? (n : Nat) : Bool = not (Z? n);

eqN (a : Nat) : Nat -> Bool = cataNat a Z? (\rec b. caseNat b False rec);
neqN (a b : Nat) : Bool = not (eqN a b);
(==N) = eqN;
(!=N) = neqN;
