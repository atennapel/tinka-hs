import lib/desc;

NatD = SumD (Ind End) End;
Nat = Data NatD;
Z : Nat = Con (False, Unit);
S : Nat -> Nat = \n. Con (True, n, Unit);

indNat :
  (P : Nat -> Type)
  -> P Z
  -> ((m : Nat) -> P m -> P (S m))
  -> (n : Nat)
  -> P n
  = \P z s n. indSumD (Ind End) End P
        (\xs h. s xs.0 h.0)
        (\_ _. z)
        n;

paraNat : {A : Type} -> Nat -> A -> (Nat -> A -> A) -> A
  = \{A} n z s. indNat (\_. A) z s n;

caseNat : {A : Type} -> Nat -> A -> (Nat -> A) -> A
  = \n z s. paraNat n z (\m _. s m);

cataNat : {A : Type} -> Nat -> A -> (A -> A) -> A
  = \n z s. paraNat n z (\_. s);

pred : Nat -> Nat = \n. caseNat n Z (\x. x);
add : Nat -> Nat -> Nat = \a b. cataNat a b S;
