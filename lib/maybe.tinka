import lib/sum;
import lib/functor;

Maybe (A : Type) : Type = Sum A ();

Just {A : Type} (x : A) : Maybe A = Left x;
Nothing {A : Type} : Maybe A = Right [];

indMaybe
  <k> {A : Type}
  (P : Maybe A -> Type k)
  (just : (x : A) -> P (Just x))
  (nothing : P Nothing)
  (m : Maybe A) : P m
  = indSum <0> P just (\_. nothing) m;

maybe {A R : Type} (j : A -> R) (n : R) (m : Maybe A) : R
  = indMaybe (\_. R) j n m;

mapMaybe {A B : Type} (fn : A -> B) (s : Maybe A) : Maybe B
  = maybe (\x. Just (fn x)) Nothing s;

instance functorMaybe : Functor Maybe = MkFunctor mapMaybe;
