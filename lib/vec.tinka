import lib/desc;
import lib/nat;

VecD (A : Type) : Desc Nat = Var Z |: Arg Nat \n. Arg A \_. Ind (Var n) (Var (S n));
Vec (n : Nat) (A : Type) : Type = Data (VecD A) n;

VNil {A : Type} : Vec 0 A = [True];
VCons {A : Type} {n : Nat} (hd : A) (tl : Vec n A) : Vec (1 +N n) A = [False, n, hd, tl];

(:V:) = VCons;

indVec
  <k> {A : Type}
  (P : {n : Nat} -> Vec n A -> Type k)
  (vnil : P VNil)
  (vcons : {m : Nat} (hd : A) (tl : Vec m A) -> P tl -> P (hd :V: tl))
  {n : Nat}
  (x : Vec n A) : P x
  = elimSumD P
      (\_ _ p. elimId (\p. P (True, p)) vnil p)
      (\case ind d.
        let m = d.0;
        let hd = d.1;
        let tl' = d.2;
        let tl = case tl';
        let p = d._2._2._2;
        elimId (\p. P (False, m, hd, tl, p)) (vcons {m} hd tl (ind tl')) p)
      x;
