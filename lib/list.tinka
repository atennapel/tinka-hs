import lib/desc;
import lib/functor;

ListD (A : Type) = desc \ListA. ListA :|: A :->: ListA :=>: ListA;
List (A : Type) : Type = Data (ListD A) [];

Nil {A : Type} : List A = [True];
Cons {A : Type} (hd : A) (tl : List A) : List A = [False, hd, tl];

(::) = Cons;

indList
  <k> {A : Type}
  (P : List A -> Type k)
  (nil : P Nil)
  (cons : (hd : A) (tl : List A) -> P tl -> P (hd :: tl))
  (x : List A) : P x
  = elimSumD P (\_ _ _. nil) (\case ind d. cons d.0 (case d.1) (ind d.1)) x;

paraList <k> {R : Type k} {A : Type} (x : List A) (nil : R) (cons : A -> List A -> R -> R) : R
  = indList (\_. R) nil cons x;

caseList <k> {R : Type k} {A : Type} (x : List A) (nil : R) (cons : A -> List A -> R) : R
  = paraList x nil (\hd tl _. cons hd tl);

cataList <k> {R : Type k} {A : Type} (x : List A) (nil : R) (cons : A -> R -> R) : R
  = paraList x nil (\hd _. cons hd);

mapList {A B : Type} (fn : A -> B) (x : List A) : List B
  = cataList x Nil (\hd tl. fn hd :: tl);

(<$L>) = mapList;

instance functorList : Functor List = MkFunctor mapList;
