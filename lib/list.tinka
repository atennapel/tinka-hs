import lib/desc;

ListD : Type -> Desc = \A. SumD (Arg A (\_. Ind End)) End;
List : Type -> Type = \A. Data (ListD A);

Nil : {A : Type} -> List A = Con (False, Unit);
Cons : {A : Type} -> A -> List A -> List A
  = \hd tl. Con (True, hd, tl, Unit);

indList :
  (A : Type)
  (P : List A -> Type)
  -> P Nil
  -> ((hd : A) (tl : List A) -> P tl -> P (Cons hd tl))
  -> (l : List A)
  -> P l
  = \A P nil cons l. indSumD (Arg A (\_. Ind End)) End P
        (\xs h. cons (fst xs) (fst (snd xs)) (fst h))
        (\_ _. nil)
        l;

paraList : {A R : Type} -> List A -> R -> (A -> List A -> R -> R) -> R
  = \{A} {R} l nil cons. indList A (\_. R) nil cons l;

caseList : {A R : Type} -> List A -> R -> (A -> List A -> R) -> R
  = \l nil cons. paraList l nil (\hd tl _. cons hd tl);

cataList : {A R : Type} -> List A -> R -> (A -> R -> R) -> R
  = \l nil cons. paraList l nil (\hd _ tl. cons hd tl);

mapList : {A B : Type} -> (A -> B) -> List A -> List B
  = \fn l. cataList l Nil (\hd tl. Cons (fn hd) tl);

appendList : {A : Type} -> List A -> List A -> List A
  = \l1 l2. cataList l1 l2 Cons;
