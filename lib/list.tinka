import lib/desc;
import lib/functor;
import lib/eq;

ListD <l> (A : Type l) : Desc (Lift <l> ()) = descL <l> \ListA. SumDL <l> ListA (Arg <l> A \_. Ind <l> ListA ListA);
List <l> (A : Type l) : Type l = Data (ListD A) [];

Nil <l> {A : Type l} : List A = [True];
Cons <l> {A : Type l} (hd : A) (tl : List A) : List A = [False, hd, tl];

(::) = Cons;

indList
  <k> <l> {A : Type l}
  (P : List A -> Type k)
  (nil : P Nil)
  (cons : (hd : A) (tl : List A) -> P tl -> P (hd :: tl))
  (x : List A) : P x
  = elimSumDL P (\_ _ _. nil) (\case ind d. cons d.0 (case {lift []} d.1) (ind {lift []} d.1)) {lift []} x;

paraList <k> {R : Type k} {A : Type} (x : List A) (nil : R) (cons : A -> List A -> R -> R) : R
  = indList (\_. R) nil cons x;

caseList <k> {R : Type k} {A : Type} (x : List A) (nil : R) (cons : A -> List A -> R) : R
  = paraList x nil (\hd tl _. cons hd tl);

cataList <k> {R : Type k} {A : Type} (x : List A) (nil : R) (cons : A -> R -> R) : R
  = paraList x nil (\hd _. cons hd);

mapList {A B : Type} (fn : A -> B) (x : List A) : List B
  = cataList x Nil (\hd tl. fn hd :: tl);

(<$L>) = mapList;

instance functorList : Functor List = MkFunctor mapList;

instance eqList : {A : Type} {{_ : Eq A}} -> Eq (List A)
  = \{A}. MkEq {List A} (\x. cataList x
      (\y. caseList {Bool} {A} y True (\_ _. False))
      (\hd rest y. caseList {Bool} {A} y False (\hd' tl'. eq hd hd' && rest tl')));
