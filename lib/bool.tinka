import lib/enum;

Bool = Tag '[True False];
True : Bool = 'True ;
False : Bool = 'False ;

indBool <k> (P : Bool -> Type k) (t : P True) (f : P False) (b : Bool) : P b =
  switchD P b [t, f];

if <l> {A : Type l} (b : Bool) (t f : A) : A = indBool (\_. A) t f b;

(<?>) <l> {A : Type l} (t f : A) (b : Bool) : A = if b t f;

not (b : Bool) : Bool = if b False True;

and (a b : Bool) : Bool = if a b False;
(&&) = and;

or (a b : Bool) : Bool = if a True b;
(||) = or;

xor (a b : Bool) : Bool = if a (not b) b;
(^^) = xor;

neqBool = xor;
eqBool (a b : Bool) : Bool = not (neqBool a b);

(!=B) = neqBool;
(==B) = eqBool;
