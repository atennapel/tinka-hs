Desc : Type1 = Data^ (
  [False, True, Bool, \x. (elim BoolDesc^) [True] (
  [False, True, Bool, \x. (elim BoolDesc^) [False, True, Type, \x. [False, False, False, Lift (lower x), [True]]] (
  [False, True, Bool, \x. (elim BoolDesc^) [False, False, True, [True]] (
  [False, True, Type, \x. [False, False, True, [True]]]) (lower x)]) (lower x)]) (lower x)]);

End : Desc = [True];
Arg : (A : Type) -> (A -> Desc) -> Desc = \A K. [False, True, A, \x. K (lower x)];
Ind : Desc -> Desc = \K. [False, False, True, K];
HInd : Type -> Desc -> Desc = \A K. [False, False, False, A, K];

El : Desc -> Type -> Type
  = \D X. (elim El) X D;

All : (D : Desc) -> (X : Type) -> (X -> Type) -> El D X -> Type
  = \D X P d. (elim All) D X P d;

SumDBody : Desc -> Desc -> Bool -> Desc
  = \A B. (elim Bool 1) (\_. Desc) A B;
SumD : Desc -> Desc -> Desc
  = \A B. Arg Bool (SumDBody A B);

DescD : Desc^ = SumD^ End^ (SumD^ (Arg^ Type \A. HInd^ (Lift A) End^) (SumD^ (Ind^ End^) (Arg^ Type \_. Ind^ End^)));

_ : HEq^2 Type1 Type1 Desc (Data^ DescD) = Refl;

indSumD :
  (A : Desc)
  (B : Desc)
  (P : Data (SumD A B) -> Type)
  (a : (d : El A (Data (SumD A B))) -> All A (Data (SumD A B)) P d -> P (True, d))
  (b : (d : El B (Data (SumD A B))) -> All B (Data (SumD A B)) P d -> P (False, d))
  (x : Data (SumD A B))
  -> P x
  = \A B P a b x. (elim Data) (SumD A B) P
      (\d hs. (elim Bool)
        (\b. (xs : El (SumDBody A B b) (Data (SumD A B))) -> All (SumD A B) (Data (SumD A B)) P (b, xs) -> P (b, xs))
        (\xs h. a xs h)
        (\xs h. b xs h)
        d._1 d._2 hs) x;

import lib/fin4.tinka;

SumD4Body : Desc -> Desc -> Desc -> Desc -> Fin4 -> Desc
  = \A B C D x. caseFin4l1 x A B C D;
SumD4 : Desc -> Desc -> Desc -> Desc -> Desc
  = \A B C D. Arg Fin4 (SumD4Body A B C D);

indSumD4 :
  (A : Desc)
  (B : Desc)
  (C : Desc)
  (D : Desc)
  (P : Data (SumD4 A B C D) -> Type)
  (a : (d : El A (Data (SumD4 A B C D))) -> All A (Data (SumD4 A B C D)) P d -> P (F4-0, d))
  (b : (d : El B (Data (SumD4 A B C D))) -> All B (Data (SumD4 A B C D)) P d -> P (F4-1, d))
  (c : (d : El C (Data (SumD4 A B C D))) -> All C (Data (SumD4 A B C D)) P d -> P (F4-2, d))
  (d : (d : El D (Data (SumD4 A B C D))) -> All D (Data (SumD4 A B C D)) P d -> P (F4-3, d))
  (x : Data (SumD4 A B C D))
  -> P x
  = \A B C D P a b c d x. (elim Data) _ P
      (\data hs. indFin4
        (\b. (xs : El (SumD4Body A B C D b) (Data (SumD4 A B C D))) -> All (SumD4 A B C D) (Data (SumD4 A B C D)) P (b, xs) -> P (b, xs))
        a b c d data._1 data._2 hs) x;

Desc2D : Desc^ = SumD4^ End^ (Arg^ Type \A. HInd^ (Lift A) End^) (Ind^ End^) (Arg^ Type \_. Ind^ End^);
Desc2 = Data^ Desc2D;

End2 : Desc2 = [F4-0^];
Arg2 : (A : Type) -> (A -> Desc2) -> Desc2 = \A K. [F4-1^, A, \x. K (lower x)];
Ind2 : Desc2 -> Desc2 = \K. [F4-2^, K];
HInd2 : Type -> Desc2 -> Desc2 = \A K. [F4-3^, A, K];

indDesc2 :
  (P : Desc2 -> Type1)
  (end : P End2)
  (arg : (A : Type) -> (K : A -> Desc2) -> ((x : A) -> P (K x)) -> P (Arg2 A K))
  (ind : (K : Desc2) -> P K -> P (Ind2 K))
  (hind : (A : Type) -> (K : Desc2) -> P K -> P (HInd2 A K))
  (x : Desc2)
  -> P x
  = \P end arg ind hind x.
    indSumD4^ End^ (Arg^ Type \A. HInd^ (Lift A) End^) (Ind^ End^) (Arg^ Type \_. Ind^ End^) P
      (\d h. end)
      (\d h. arg d.0 (\x. d.1 (lift x)) (\x. h.0 (lift x)))
      (\d h. ind d.0 h.0)
      (\d h. hind d.0 d.1 h.0)
      x;

ElDesc2 : Desc2 -> Type -> Type
  = \D X. indDesc2 (\_. Type)
      ()
      (\A _ K. (x : A) ** K x)
      (\_ K. X ** K)
      (\A _ K. (A -> X) ** K)
      D;

{-
mapDesc2 : (D : Desc2) -> {A B : Type} -> (A -> B) -> ElDesc2 D A -> ElDesc2 D B
  = \D. indDesc2 (\D. {A B : Type} -> (A -> B) -> ElDesc2 D A -> ElDesc2 D B)
      (\_ _. [])
      _arg --(\T K map {A} {B} fn x. let test = map x._1 {A} {B} fn; let y = x._2; _x)
      (\K map {A} {B} fn x. (fn x._1, map {A} {B} fn x._2))
      (\T K map {A} {B} fn x. (\y. fn (x._1 y), map {A} {B} fn x._2))
      D;
-}
