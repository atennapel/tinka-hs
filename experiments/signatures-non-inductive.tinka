{- signatures for non-inductive types -}

import lib/desc;
import lib/list;

-- constructor types
ConTyD = descL \ConTy. SumDL ConTy (Arg Type \A. (Lift A :->: ConTy) :=>: ConTy);
ConTy = Data ConTyD [];
U : ConTy = [True];
Pi (A : Type) (B : A -> ConTy) : ConTy = [False, A, \x. B (lower x)]; 

indConTy
  <k> (P : ConTy -> Type k)
  (u : P U)
  (pi : (A : Type) (B : A -> ConTy) -> ((x : A) -> P (B x)) -> P (Pi A B))
  (x : ConTy) : P x
  = elimSumDL P
      (\_ _ _. u)
      (\case ind d.
        let a = d.0;
        let b' = d.1;
        let b (x : a) : ConTy = case {[]} (b' (lift x));
        let pb (x : a) : P (b x) = ind {[]} (b' (lift x));
        pi a b pb)
      {[]} x;

-- contexts
Ctx = List ConTy;

-- tags
TagD : Desc (Ctx ** ConTy) = idesc \Tag.
  SumDL (Arg Ctx \C. Arg ConTy \A. Tag (A :: C, A))
        (Arg Ctx \C. Arg ConTy \A. Arg ConTy \B. Tag (C, A) :=>: Tag (B :: C, A));
Tag (C : Ctx) (A : ConTy) = Data TagD (C, A);

TZ {C : Ctx} {A : ConTy} : Tag (A :: C) A = [True, C, A];
TS {C : Ctx} {A B : ConTy} (t : Tag C A) : Tag (B :: C) A = [False, C, A, B, t];

indTag
  <k> (P : {C : Ctx} {A : ConTy} -> Tag C A -> Type k)
  (tz : {C : Ctx} {A : ConTy} -> P {A :: C} {A} TZ)
  (ts : {C : Ctx} {A B : ConTy} (x : Tag C A) -> P x -> P {B :: C} {A} (TS x))
  {C : Ctx} {A : ConTy} (x : Tag C A) : P x
  = elimSumDL P
      (\_ _ {i} d.
        let c = d.0;
        let a = d.1;
        let p = d._2._2;
        elimId {Ctx ** ConTy} {(a :: c, a)} (\{y} p. P {y._1} {y._2} (True, c, a, p)) tz p)
      (\case ind d.
        let c = d.0;
        let a = d.1;
        let b = d.2;
        let t' = d.3;
        let t = case {(c, a)} t';
        let p = d._2._2._2._2;
        elimId {Ctx ** ConTy} {(b :: c, a)} (\{y} p. P {y._1} {y._2} (False, c, a, b, t, p)) (ts t (ind {(c, a)} t')) p)
      {(C, A)} x;

-- terms
TmD : Desc (Ctx ** ConTy) = idesc \Tm.
  SumDL (Arg Ctx \C. Arg ConTy \A. Tag C A :->: Tm (C, A))
        (Arg Ctx \C. Arg Type \A. Arg (A -> ConTy) \B. Ind (Tm (C, Pi A B)) (Arg (Lift <1> A) \x. Tm (C, B (lower x))));
Tm (C : Ctx) (A : ConTy) = Data TmD (C, A);

El' {C : Ctx} {A : ConTy} (t : Tag C A) : Tm C A = [True, C, A, t];
App {C : Ctx} {A : Type} {B : A -> ConTy} (f : Tm C (Pi A B)) (x : A) : Tm C (B x) = [False, C, A, B, f, lift x];

Data' (C : Ctx) : Type 1 = Tm C U;

indTm
  <k> (P : {C : Ctx} {A : ConTy} -> Tm C A -> Type k)
  (el : {C : Ctx} {A : ConTy} (t : Tag C A) -> P (El' t))
  (app : {C : Ctx} {A : Type} {B : A -> ConTy} (f : Tm C (Pi A B)) -> P f -> (x : A) -> P (App f x))
  {C : Ctx} {A : ConTy} (x : Tm C A) : P x
  = elimSumDL P
      (\_ _ d.
        let c = d.0;
        let a = d.1;
        let t = d.2;
        let p = d._2._2._2;
        elimId {Ctx ** ConTy} {(c, a)} (\{y} p. P {y._1} {y._2} (True, c, a, t, p)) (el t) p)
      (\case ind d.
        let c = d.0;
        let a = d.1;
        let b = d.2;
        let f' = d.3;
        let f = case {(c, Pi a b)} f';
        let x = d.4;
        let p = d._2._2._2._2._2;
        elimId {Ctx ** ConTy} {(c, b (lower x))} (\{y} p. P {y._1} {y._2} (False, c, a, b, f, x, p)) (app f (ind {(c, Pi a b)} f') (lower x)) p)
      {(C, A)} x;

-- elimination

-- Arg A \_. U ~> (x : A) -> P (C x)

ElimConTy {C : Ctx} (P : Data' C -> Type) : (A : ConTy) -> Tm C A -> Type =
  indConTy (\A. Tm C A -> Type)
    (\t. P t)
    (\A B ind t. (x : A) -> ind x (App t x));

Elim' {C' : Ctx} (P : Data' C' -> Type) : (C : Ctx) -> ({A : ConTy} -> Tag C A -> Tag C' A) -> Type =
  indList (\C. ({A : ConTy} -> Tag C A -> Tag C' A) -> Type)
    (\_. ())
    (\ty rest ind k. ElimConTy P ty (El' (k TZ)) ** ind (\x. k (TS x)));
Elim {C : Ctx} (P : Data' C -> Type) : Type = Elim' {C} P C (\x. x);

elimTag {C' : Ctx} (P : Data' C' -> Type) {C : Ctx} {A : ConTy} :
  (t : Tag C A) (conv : {A : ConTy} -> Tag C A -> Tag C' A) -> Elim' {C'} P C conv -> ElimConTy P A (El' (conv t)) =
  indTag (\{C} {A} t. (conv : {A : ConTy} -> Tag C A -> Tag C' A) -> Elim' {C'} P C conv -> ElimConTy P A (El' (conv t)))
    (\_ ps. ps._1)
    (\x ind k ps. ind (\x. k (TS x)) ps._2)
    {C} {A};

elimTm {C' : Ctx} (P : Data' C' -> Type) (x : Data' C') (ps : Elim P) {C : Ctx} {A : ConTy} :
  (t : Tm C A) -> (conv : {A : ConTy} -> Tm C A -> Tm C' A) -> ElimConTy P A (conv t) =
  indTm (\{C} {A} t. (conv : {A : ConTy} -> Tm C A -> Tm C' A) -> ElimConTy P A (conv t))
    _el
    (\f ind x conv. let y = ind conv x; _x);

-- elim (C : Ctx) (P : Data' C -> Type) (x : Data' C) (ps : Elim P) : P x = _;

SumCtx : Type -> Type -> Ctx = \A B. (Pi A \_. U) :: (Pi B \_. U) :: Nil;
Sum' : Type -> Type -> Type 1 = \A B. Data' (SumCtx A B);
Left' : {A B} -> A -> Sum' A B = \{A} {B} x. App (El' TZ) x;
Right' : {A B} -> B -> Sum' A B = \{A} {B} x. App (El' (TS TZ)) x;
