import lib/desc;
import lib/bool;
import lib/nat;

IDescD : Type -> Desc^ = \I.
  SumD^ (Arg^ (Lift I) (\_. End^)) (
  SumD^ (Arg^ Type (\A. HInd^ (Lift A) End^)) (
  SumD^ (Arg^ (Lift I) (\_. Ind^ End^))
        (Arg^ Type (\_. Arg^ (Lift I) (\_. Ind^ End^)))));

IDesc : Type -> Type1 = \I. Data^ (IDescD I);

IEnd : {I : Type} -> I -> IDesc I = \i. Con (True, lift i, Unit);
IArg : {I : Type} -> (A : Type) -> (A -> IDesc I) -> IDesc I
  = \A K. Con (False, True, A, \x. K (lower x), Unit);
IInd : {I : Type} -> I -> IDesc I -> IDesc I = \i K. Con (False, False, True, lift i, K, Unit);
IHInd : {I : Type} -> Type -> I -> IDesc I -> IDesc I = \A i K. Con (False, False, False, A, lift i, K, Unit);

ISumDBody : {I : Type} -> IDesc I -> IDesc I -> Bool -> IDesc I
  = \{I} A B b. (elim Bool 1) (\_. IDesc I) A B b;
ISumD : {I : Type} -> IDesc I -> IDesc I -> IDesc I
  = \A B. IArg Bool (ISumDBody A B);

VecD = \A. ISumD (IEnd Z) (IArg Nat (\m. IArg A (\_. IInd m (IEnd (S m)))));
