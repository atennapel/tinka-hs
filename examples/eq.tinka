Eq : (A : Type) -> A -> A -> Type = \A x y. HEq A A x y;

not : Bool -> Bool = \b. (elim Bool) (\_. Bool) False True b;

_ : Eq Bool True (not False) = Refl;

_ : (b : Bool) -> Eq Bool b (not (not b))
  = \b. (elim Bool) (\b. Eq Bool b (not (not b))) Refl Refl b;

-- currently the system supports a definitional eta law for refl
_ : (A : Type) (x : A) (p : Eq A x x) -> Eq (Eq A x x) p Refl
  = \A x p. Refl;
